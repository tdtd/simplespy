{"version":3,"names":[],"mappings":"","sources":["simpleSpy.js"],"sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){\n(function (global){\n'use strict';\n\nvar SimpleSpy = require('./modules/simpleSpy.js');\nglobal.SimpleSpy = module.exports = SimpleSpy;\n\n}).call(this,typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n\n},{\"./modules/simpleSpy.js\":2}],2:[function(require,module,exports){\n'use strict';\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar Throttler = require('./throttle');\nvar Util = require('./util');\n\nfunction getByProp(prop) {\n  var matching = [];\n  var elems = document.getElementsByTagName('*');\n  for (var i = 0, len = elems.length; i < len; i++) {\n    if (elems[i].getAttribute(prop) !== null) {\n      matching.push(elems[i]);\n    }\n  }\n  return matching;\n}\n\nfunction checkUntil(array, checkFunction) {\n  for (var i = 0, len = array.length; i < len; i++) {\n    var bool = checkFunction(array[i]);\n    if (bool) {\n      return { index: i, val: array[i] };\n    }\n  }\n};\n\nvar SimpleSpy = function () {\n  function SimpleSpy(initObj) {\n    _classCallCheck(this, SimpleSpy);\n\n    this.elements = [];\n    this.links = [];\n    /* Options */\n    this.onlyTop = initObj && \"onlyTop\" in initObj ? initObj.onlyTop : true;\n    this.activeClassName = initObj && initObj.activeClassName ? initObj.activeClassName : 'active';\n    this.triggerFunctions = initObj && \"triggerFunctions\" in initObj ? initObj.triggerFunctions : true;\n    this.linkArriveFunction = initObj.linkArriveFunction;\n    this.elementArriveFunction = initObj.elementArriveFunction;\n    this.linkDepartFunction = initObj.linkDepartFunction;\n    this.elementDepartFunction = initObj.elementDepartFunction;\n    /* UI */\n    this.lastTop;\n    this.inboundsArray = [];\n\n    /* Window Listeners */\n    window.addEventListener(\"tScroll\", this.onScroll.bind(this));\n    /* Document Listeners */\n    this._init();\n  }\n\n  _createClass(SimpleSpy, [{\n    key: '_init',\n    value: function _init() {\n      //Clear Object Arrays\n      this.elements = [];\n      this.links = [];\n      //Get Spied Elements\n      var spyElems = getByProp('data-scroll-spy');\n      //Get Link Elements\n      var spyLinks = getByProp('data-scroll-link');\n      //Generate link objects\n      for (var i = 0, len = spyLinks.length; i < len; i++) {\n        this.links.push(new ScrollLink(spyLinks[i], this.linkArriveFunction, this.linkDepartFunction));\n      }\n      //Generate spy ScrollElement Objects if Corresponding link exists\n      for (var _i = 0, _len = spyElems.length; _i < _len; _i++) {\n        for (var j = 0, jLen = this.links.length; j < jLen; j++) {\n          if (spyElems[_i].dataset.scrollSpy === this.links[j].name) {\n            this.elements.push(new ScrollElement(spyElems[_i], this.links[j], this.elementArriveFunction, this.elementDepartFunction));\n          }\n        }\n      }\n      //Sort so that elements move from the top of the window to the bottom (just in case)\n      this.elements = this.elements.sort(function (a, b) {\n        return a.top - b.top;\n      });\n      //Scroll once just to update the classes\n      this.onScroll();\n    }\n  }, {\n    key: 'onScroll',\n    value: function onScroll() {\n      //get the top of the window\n      var top = this.getTop();\n      //If only showing the lowest element above the top of the window\n      if (this.onlyTop) {\n        //Check for the last element in the array that is still higher than the top\n        var topElement = checkUntil(this.elements, function (i) {\n          return i.bottom > top;\n        });\n        if (topElement) {\n          if (this.lastTop !== topElement.index) {\n            //As long as this.lastTop is not undefined, remove its class\n            if (typeof this.lastTop !== 'undefined') this.removeClass(this.elements[this.lastTop], this.activeClassName);\n            //set new top element\n            this.addClass(this.elements[topElement.index], this.activeClassName);\n            this.lastTop = topElement.index;\n          }\n        }\n        //If checking all inbounds elements\n      } else {\n        //Get the bottom of the window\n        var bot = this.getBottom();\n        //Check all Scroll Elements\n        for (var i = 0, len = this.elements.length; i < len; i++) {\n          //Check if Each element is inbounds\n          if (this.elements[i].inbounds(top, bot)) {\n            this.addToInboundsArray(this.elements[i].name, i);\n            //If not inbounds remove from array\n          } else {\n            //make sure it is in array\n            this.removeFromInboundsArray(this.elements[i].name, i);\n          }\n        }\n      }\n    }\n  }, {\n    key: 'getTop',\n    value: function getTop() {\n      var body = document.body;\n      var docEl = document.documentElement;\n      var scrollTop = window.pageYOffset || docEl.scrollTop || body.scrollTop;\n      var clientTop = docEl.clientTop || body.clientTop || 0;\n      var top = scrollTop - clientTop;\n      return Math.round(top);\n    }\n  }, {\n    key: 'getBottom',\n    value: function getBottom() {\n      var top = this.getTop();\n      var height = window.innerHeight;\n      return top + height;\n    }\n  }, {\n    key: 'addToInboundsArray',\n    value: function addToInboundsArray(name, elementsIndex) {\n      var index = this.inboundsArray.indexOf(name);\n      if (index < 0) {\n        this.inboundsArray.push(name);\n        this.addClass(this.elements[elementsIndex], this.activeClassName);\n      }\n    }\n  }, {\n    key: 'removeFromInboundsArray',\n    value: function removeFromInboundsArray(name, elementsIndex) {\n      var index = this.inboundsArray.indexOf(name);\n      if (index > -1) {\n        this.inboundsArray.splice(index, 1);\n        this.removeClass(this.elements[elementsIndex], this.activeClassName);\n      }\n    }\n  }, {\n    key: 'addClass',\n    value: function addClass(element, className) {\n      if (element && this.triggerFunctions) element.arriveFunction();\n      if (element && \"linkElement\" in element) element.linkElement.addClass(className, this.triggerFunctions);\n    }\n  }, {\n    key: 'removeClass',\n    value: function removeClass(element, className) {\n      if (element && this.triggerFunctions) element.departFunction();\n      if (element && \"linkElement\" in element) element.linkElement.removeClass(className, this.triggerFunctions);\n    }\n  }, {\n    key: 'setOnlyTop',\n    value: function setOnlyTop(setter) {\n      if (setter === 'toggle') return this.onlyTop = !this.onlyTop;\n      return this.onlyTop = setter;\n    }\n  }, {\n    key: 'setLinkArriveFunction',\n    value: function setLinkArriveFunction(elName, func) {\n      for (var i = 0, len = this.elements.length; i < len; i++) {\n        if (this.elements[i].name === elName) {\n          this.elements[i].linkElement.arriveFunction = func;\n        }\n      }\n    }\n  }, {\n    key: 'setLinkDepartFunction',\n    value: function setLinkDepartFunction(elName, func) {\n      for (var i = 0, len = this.elements.length; i < len; i++) {\n        if (this.elements[i].name === elName) {\n          this.elements[i].linkElement.departFunction = func;\n        }\n      }\n    }\n  }, {\n    key: 'setElementArriveFunction',\n    value: function setElementArriveFunction(elName, func) {\n      for (var i = 0, len = this.elements.length; i < len; i++) {\n        if (this.elements[i].name === elName) this.elements[i].departFunction = func;\n      }\n    }\n  }, {\n    key: 'setElementDepartFunction',\n    value: function setElementDepartFunction(elName, func) {\n      for (var i = 0, len = this.elements.length; i < len; i++) {\n        if (this.elements[i].name === elName) this.elements[i].departFunction = func;\n      }\n    }\n  }]);\n\n  return SimpleSpy;\n}();\n\n/*\r\n  Link Element to be modified\r\n*/\n\n\nvar ScrollLink = function () {\n  function ScrollLink(self, arriveFunction, departFunction) {\n    _classCallCheck(this, ScrollLink);\n\n    this.self = self;\n    this.name = self.dataset.scrollLink;\n    this.arriveFunction = arriveFunction;\n    this.departFunction = departFunction;\n    this._aFunc;\n    this._dFunc;\n  }\n\n  _createClass(ScrollLink, [{\n    key: 'getCustom',\n    value: function getCustom(className) {\n      return this.self.dataset.scrollClass;\n    }\n  }, {\n    key: 'addClass',\n    value: function addClass(className, runFunction) {\n      this.self = Util.addClass(this.self, this.getCustom() || className);\n      if (runFunction && this._aFunc) this._aFunc();\n    }\n  }, {\n    key: 'removeClass',\n    value: function removeClass(className, runFunction) {\n      this.self = Util.removeClass(this.self, this.getCustom() || className);\n      if (runFunction && this._dFunc) this._dFunc();\n    }\n  }, {\n    key: 'arriveFunction',\n    set: function set(val) {\n      if (typeof val !== 'function') return;\n      this._aFunc = val;\n    },\n    get: function get() {\n      if (!this._aFunc) return function () {};\n      return this._aFunc;\n    }\n  }, {\n    key: 'departFunction',\n    set: function set(val) {\n      if (typeof val !== 'function') return;\n      this._dFunc = val;\n    },\n    get: function get() {\n      if (!this._dFunc) return function () {};\n      return this._dFunc;\n    }\n  }]);\n\n  return ScrollLink;\n}();\n\n/*\r\n  Scroll Element to be watched\r\n*/\n\n\nvar ScrollElement = function () {\n  function ScrollElement(self, linkElement, arriveFunction, departFunction) {\n    _classCallCheck(this, ScrollElement);\n\n    this.self = self;\n    this.linkElement = linkElement;\n    this.name = self.dataset.scrollSpy;\n    this.height = self.offsetHeight;\n    this.top = self.offsetTop;\n    this.bottom = this.top + this.height;\n\n    /* Functions */\n    this.arriveFunction = arriveFunction;\n    this.departFunction = departFunction;\n    this._aFunc;\n    this._dFunc;\n    /* Window Listeners */\n    window.addEventListener(\"tResize\", this.resize.bind(this));\n    this.self.addEventListener(\"click\", function () {\n      this._aFunc;\n    }.bind(this));\n  }\n\n  _createClass(ScrollElement, [{\n    key: 'resize',\n    value: function resize() {\n      this.height = this.self.offsetHeight;\n      this.top = this.self.offsetTop;\n      this.bottom = this.top + this.height;\n    }\n  }, {\n    key: 'inbounds',\n    value: function inbounds(screenMin, screenMax) {\n      return this.bottom > screenMin && this.top < screenMax;\n    }\n  }, {\n    key: 'arriveFunction',\n    set: function set(val) {\n      if (typeof val !== 'function') return;\n      this._aFunc = val;\n    },\n    get: function get() {\n      if (!this._aFunc) return function () {};\n      return this._aFunc;\n    }\n  }, {\n    key: 'departFunction',\n    set: function set(val) {\n      if (typeof val !== 'function') return;\n      this._dFunc = val;\n    },\n    get: function get() {\n      if (!this._dFunc) return function () {};\n      return this._dFunc;\n    }\n  }]);\n\n  return ScrollElement;\n}();\n\nmodule.exports = SimpleSpy;\n\n},{\"./throttle\":3,\"./util\":4}],3:[function(require,module,exports){\n\"use strict\";\n\n(function () {\n    var throttle = function throttle(type, name, obj) {\n        obj = obj || window;\n        var running = false;\n        var func = function func() {\n            if (running) {\n                return;\n            }\n            running = true;\n            requestAnimationFrame(function () {\n                obj.dispatchEvent(new CustomEvent(name));\n                running = false;\n            });\n        };\n        obj.addEventListener(type, func);\n    };\n\n    /* init - you can init any event */\n    throttle(\"resize\", \"tResize\");\n    throttle(\"scroll\", \"tScroll\");\n})();\n\n},{}],4:[function(require,module,exports){\n\"use strict\";\n\nmodule.exports = {\n  bind: function bind(element, name, listener) {\n    element.addEventListener(name, listener, false);\n  },\n\n  addClass: function addClass(element, className) {\n    var classes = element.className.split(' ');\n    if (classes.indexOf(className) < 0) {\n      classes.push(className);\n    }\n\n    element.className = classes.join(' ');\n    return element;\n  },\n\n  removeClass: function removeClass(element, className) {\n    var classes = element.className.split(' ');\n    var index = classes.indexOf(className);\n    if (index > -1) {\n      classes.splice(index, 1);\n    }\n\n    element.className = classes.join(' ');\n    return element;\n  }\n};\n\n},{}]},{},[1])\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCJzcmNcXHNyY1xcbWFpbi5qcyIsInNyY1xcbW9kdWxlc1xcc2ltcGxlU3B5LmpzIiwic3JjXFxtb2R1bGVzXFx0aHJvdHRsZS5qcyIsInNyY1xcbW9kdWxlc1xcdXRpbC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7OztBQ0FBLElBQU0sWUFBWSxRQUFRLHdCQUFSLENBQWxCO0FBQ0EsT0FBTyxTQUFQLEdBQW1CLE9BQU8sT0FBUCxHQUFpQixTQUFwQzs7Ozs7Ozs7Ozs7QUNEQSxJQUFNLFlBQVksUUFBUSxZQUFSLENBQWxCO0FBQ0EsSUFBTSxPQUFPLFFBQVEsUUFBUixDQUFiOztBQUVBLFNBQVMsU0FBVCxDQUFtQixJQUFuQixFQUF5QjtBQUN2QixNQUFJLFdBQVcsRUFBZjtBQUNBLE1BQUksUUFBUSxTQUFTLG9CQUFULENBQThCLEdBQTlCLENBQVo7QUFDQSxPQUFLLElBQUksSUFBSSxDQUFSLEVBQVcsTUFBTSxNQUFNLE1BQTVCLEVBQW9DLElBQUksR0FBeEMsRUFBNkMsR0FBN0MsRUFBaUQ7QUFDL0MsUUFBSSxNQUFNLENBQU4sRUFBUyxZQUFULENBQXNCLElBQXRCLE1BQWdDLElBQXBDLEVBQTBDO0FBQ3hDLGVBQVMsSUFBVCxDQUFjLE1BQU0sQ0FBTixDQUFkO0FBQ0Q7QUFDRjtBQUNELFNBQU8sUUFBUDtBQUNEOztBQUVELFNBQVMsVUFBVCxDQUFvQixLQUFwQixFQUEyQixhQUEzQixFQUF5QztBQUN4QyxPQUFLLElBQUksSUFBSSxDQUFSLEVBQVcsTUFBTSxNQUFNLE1BQTVCLEVBQW9DLElBQUksR0FBeEMsRUFBNkMsR0FBN0MsRUFBaUQ7QUFDL0MsUUFBTSxPQUFPLGNBQWMsTUFBTSxDQUFOLENBQWQsQ0FBYjtBQUNDLFFBQUksSUFBSixFQUFTO0FBQ1IsYUFBTyxFQUFDLE9BQU8sQ0FBUixFQUFXLEtBQUssTUFBTSxDQUFOLENBQWhCLEVBQVA7QUFDQTtBQUNGO0FBQ0Y7O0lBRUssUztBQUNKLHFCQUFZLE9BQVosRUFBcUI7QUFBQTs7QUFDbkIsU0FBSyxRQUFMLEdBQWdCLEVBQWhCO0FBQ0EsU0FBSyxLQUFMLEdBQWEsRUFBYjtBQUNBO0FBQ0EsU0FBSyxPQUFMLEdBQWdCLFdBQVcsYUFBYSxPQUF6QixHQUFvQyxRQUFRLE9BQTVDLEdBQXNELElBQXJFO0FBQ0EsU0FBSyxlQUFMLEdBQXdCLFdBQVcsUUFBUSxlQUFwQixHQUF1QyxRQUFRLGVBQS9DLEdBQWlFLFFBQXhGO0FBQ0EsU0FBSyxnQkFBTCxHQUEwQixXQUFXLHNCQUFzQixPQUFsQyxHQUE2QyxRQUFRLGdCQUFyRCxHQUF3RSxJQUFqRztBQUNBLFNBQUssa0JBQUwsR0FBMEIsUUFBUSxrQkFBbEM7QUFDQSxTQUFLLHFCQUFMLEdBQTZCLFFBQVEscUJBQXJDO0FBQ0EsU0FBSyxrQkFBTCxHQUEwQixRQUFRLGtCQUFsQztBQUNBLFNBQUsscUJBQUwsR0FBNkIsUUFBUSxxQkFBckM7QUFDQTtBQUNBLFNBQUssT0FBTDtBQUNBLFNBQUssYUFBTCxHQUFxQixFQUFyQjs7QUFFQTtBQUNBLFdBQU8sZ0JBQVAsQ0FBd0IsU0FBeEIsRUFBbUMsS0FBSyxRQUFMLENBQWMsSUFBZCxDQUFtQixJQUFuQixDQUFuQztBQUNBO0FBQ0MsU0FBSyxLQUFMO0FBQ0Y7Ozs7NEJBRU87QUFDTjtBQUNBLFdBQUssUUFBTCxHQUFnQixFQUFoQjtBQUNBLFdBQUssS0FBTCxHQUFhLEVBQWI7QUFDQTtBQUNBLFVBQU0sV0FBVyxVQUFVLGlCQUFWLENBQWpCO0FBQ0E7QUFDQSxVQUFNLFdBQVcsVUFBVSxrQkFBVixDQUFqQjtBQUNBO0FBQ0EsV0FBSyxJQUFJLElBQUksQ0FBUixFQUFXLE1BQU0sU0FBUyxNQUEvQixFQUF1QyxJQUFJLEdBQTNDLEVBQWdELEdBQWhELEVBQXFEO0FBQ25ELGFBQUssS0FBTCxDQUFXLElBQVgsQ0FBZ0IsSUFBSSxVQUFKLENBQWUsU0FBUyxDQUFULENBQWYsRUFBNEIsS0FBSyxrQkFBakMsRUFBcUQsS0FBSyxrQkFBMUQsQ0FBaEI7QUFDRDtBQUNEO0FBQ0EsV0FBSyxJQUFJLEtBQUksQ0FBUixFQUFXLE9BQU0sU0FBUyxNQUEvQixFQUF1QyxLQUFJLElBQTNDLEVBQWdELElBQWhELEVBQXFEO0FBQ25ELGFBQUssSUFBSSxJQUFJLENBQVIsRUFBVyxPQUFPLEtBQUssS0FBTCxDQUFXLE1BQWxDLEVBQTBDLElBQUksSUFBOUMsRUFBb0QsR0FBcEQsRUFBeUQ7QUFDdkQsY0FBSSxTQUFTLEVBQVQsRUFBWSxPQUFaLENBQW9CLFNBQXBCLEtBQWtDLEtBQUssS0FBTCxDQUFXLENBQVgsRUFBYyxJQUFwRCxFQUEwRDtBQUN4RCxpQkFBSyxRQUFMLENBQWMsSUFBZCxDQUFtQixJQUFJLGFBQUosQ0FBa0IsU0FBUyxFQUFULENBQWxCLEVBQStCLEtBQUssS0FBTCxDQUFXLENBQVgsQ0FBL0IsRUFBOEMsS0FBSyxxQkFBbkQsRUFBMEUsS0FBSyxxQkFBL0UsQ0FBbkI7QUFDRDtBQUNGO0FBQ0Y7QUFDRDtBQUNBLFdBQUssUUFBTCxHQUFnQixLQUFLLFFBQUwsQ0FBYyxJQUFkLENBQW1CLFVBQUMsQ0FBRCxFQUFJLENBQUosRUFBVTtBQUMzQyxlQUFPLEVBQUUsR0FBRixHQUFRLEVBQUUsR0FBakI7QUFDRCxPQUZlLENBQWhCO0FBR0E7QUFDQSxXQUFLLFFBQUw7QUFDRDs7OytCQUVVO0FBQ1Q7QUFDQSxVQUFNLE1BQU0sS0FBSyxNQUFMLEVBQVo7QUFDQTtBQUNBLFVBQUcsS0FBSyxPQUFSLEVBQWdCO0FBQ2Q7QUFDQSxZQUFJLGFBQWEsV0FBVyxLQUFLLFFBQWhCLEVBQTBCLFVBQUMsQ0FBRCxFQUFLO0FBQzlDLGlCQUFRLEVBQUUsTUFBRixHQUFXLEdBQW5CO0FBQ0QsU0FGZ0IsQ0FBakI7QUFHQSxZQUFJLFVBQUosRUFBZTtBQUNiLGNBQUksS0FBSyxPQUFMLEtBQWlCLFdBQVcsS0FBaEMsRUFBc0M7QUFDcEM7QUFDQSxnQkFBSSxPQUFPLEtBQUssT0FBWixLQUF3QixXQUE1QixFQUF5QyxLQUFLLFdBQUwsQ0FBaUIsS0FBSyxRQUFMLENBQWMsS0FBSyxPQUFuQixDQUFqQixFQUE4QyxLQUFLLGVBQW5EO0FBQ3pDO0FBQ0EsaUJBQUssUUFBTCxDQUFjLEtBQUssUUFBTCxDQUFjLFdBQVcsS0FBekIsQ0FBZCxFQUErQyxLQUFLLGVBQXBEO0FBQ0EsaUJBQUssT0FBTCxHQUFlLFdBQVcsS0FBMUI7QUFDRDtBQUNGO0FBQ0g7QUFDQyxPQWZELE1BZU87QUFDTDtBQUNBLFlBQU0sTUFBTSxLQUFLLFNBQUwsRUFBWjtBQUNBO0FBQ0EsYUFBSyxJQUFJLElBQUksQ0FBUixFQUFXLE1BQU0sS0FBSyxRQUFMLENBQWMsTUFBcEMsRUFBNEMsSUFBSSxHQUFoRCxFQUFxRCxHQUFyRCxFQUEwRDtBQUN4RDtBQUNBLGNBQUksS0FBSyxRQUFMLENBQWMsQ0FBZCxFQUFpQixRQUFqQixDQUEwQixHQUExQixFQUErQixHQUEvQixDQUFKLEVBQXlDO0FBQ3ZDLGlCQUFLLGtCQUFMLENBQXdCLEtBQUssUUFBTCxDQUFjLENBQWQsRUFBaUIsSUFBekMsRUFBK0MsQ0FBL0M7QUFDRjtBQUNDLFdBSEQsTUFHTztBQUNMO0FBQ0EsaUJBQUssdUJBQUwsQ0FBNkIsS0FBSyxRQUFMLENBQWMsQ0FBZCxFQUFpQixJQUE5QyxFQUFvRCxDQUFwRDtBQUNEO0FBQ0Y7QUFDRjtBQUNGOzs7NkJBRVE7QUFDTixVQUFJLE9BQU8sU0FBUyxJQUFwQjtBQUNBLFVBQUksUUFBUSxTQUFTLGVBQXJCO0FBQ0EsVUFBSSxZQUFZLE9BQU8sV0FBUCxJQUFzQixNQUFNLFNBQTVCLElBQXlDLEtBQUssU0FBOUQ7QUFDQSxVQUFJLFlBQVksTUFBTSxTQUFOLElBQW1CLEtBQUssU0FBeEIsSUFBcUMsQ0FBckQ7QUFDQSxVQUFJLE1BQU8sWUFBWSxTQUF2QjtBQUNBLGFBQU8sS0FBSyxLQUFMLENBQVcsR0FBWCxDQUFQO0FBQ0Y7OztnQ0FFVztBQUNWLFVBQU0sTUFBTSxLQUFLLE1BQUwsRUFBWjtBQUNBLFVBQU0sU0FBUyxPQUFPLFdBQXRCO0FBQ0EsYUFBTyxNQUFJLE1BQVg7QUFDRDs7O3VDQUVrQixJLEVBQU0sYSxFQUFlO0FBQ3RDLFVBQU0sUUFBUSxLQUFLLGFBQUwsQ0FBbUIsT0FBbkIsQ0FBMkIsSUFBM0IsQ0FBZDtBQUNBLFVBQUksUUFBUSxDQUFaLEVBQWM7QUFDWixhQUFLLGFBQUwsQ0FBbUIsSUFBbkIsQ0FBd0IsSUFBeEI7QUFDQSxhQUFLLFFBQUwsQ0FBYyxLQUFLLFFBQUwsQ0FBYyxhQUFkLENBQWQsRUFBNEMsS0FBSyxlQUFqRDtBQUNEO0FBQ0Y7Ozs0Q0FFdUIsSSxFQUFNLGEsRUFBZTtBQUMzQyxVQUFNLFFBQVEsS0FBSyxhQUFMLENBQW1CLE9BQW5CLENBQTJCLElBQTNCLENBQWQ7QUFDQSxVQUFJLFFBQVEsQ0FBQyxDQUFiLEVBQWU7QUFDYixhQUFLLGFBQUwsQ0FBbUIsTUFBbkIsQ0FBMEIsS0FBMUIsRUFBaUMsQ0FBakM7QUFDQSxhQUFLLFdBQUwsQ0FBaUIsS0FBSyxRQUFMLENBQWMsYUFBZCxDQUFqQixFQUErQyxLQUFLLGVBQXBEO0FBQ0Q7QUFDRjs7OzZCQUVRLE8sRUFBUyxTLEVBQVU7QUFDMUIsVUFBSSxXQUFXLEtBQUssZ0JBQXBCLEVBQXNDLFFBQVEsY0FBUjtBQUN0QyxVQUFJLFdBQVcsaUJBQWlCLE9BQWhDLEVBQXlDLFFBQVEsV0FBUixDQUFvQixRQUFwQixDQUE2QixTQUE3QixFQUF3QyxLQUFLLGdCQUE3QztBQUMxQzs7O2dDQUVXLE8sRUFBUyxTLEVBQVU7QUFDN0IsVUFBSSxXQUFXLEtBQUssZ0JBQXBCLEVBQXNDLFFBQVEsY0FBUjtBQUN0QyxVQUFJLFdBQVcsaUJBQWlCLE9BQWhDLEVBQXlDLFFBQVEsV0FBUixDQUFvQixXQUFwQixDQUFnQyxTQUFoQyxFQUEyQyxLQUFLLGdCQUFoRDtBQUMxQzs7OytCQUVVLE0sRUFBTztBQUNoQixVQUFJLFdBQVcsUUFBZixFQUF5QixPQUFPLEtBQUssT0FBTCxHQUFlLENBQUMsS0FBSyxPQUE1QjtBQUN6QixhQUFPLEtBQUssT0FBTCxHQUFlLE1BQXRCO0FBQ0Q7OzswQ0FFcUIsTSxFQUFRLEksRUFBSztBQUNqQyxXQUFLLElBQUksSUFBSSxDQUFSLEVBQVcsTUFBTSxLQUFLLFFBQUwsQ0FBYyxNQUFwQyxFQUE0QyxJQUFJLEdBQWhELEVBQXFELEdBQXJELEVBQXlEO0FBQ3ZELFlBQUksS0FBSyxRQUFMLENBQWMsQ0FBZCxFQUFpQixJQUFqQixLQUEwQixNQUE5QixFQUFzQztBQUNwQyxlQUFLLFFBQUwsQ0FBYyxDQUFkLEVBQWlCLFdBQWpCLENBQTZCLGNBQTdCLEdBQThDLElBQTlDO0FBQ0Q7QUFDRjtBQUNGOzs7MENBRXFCLE0sRUFBUSxJLEVBQUs7QUFDakMsV0FBSyxJQUFJLElBQUksQ0FBUixFQUFXLE1BQU0sS0FBSyxRQUFMLENBQWMsTUFBcEMsRUFBNEMsSUFBSSxHQUFoRCxFQUFxRCxHQUFyRCxFQUF5RDtBQUN2RCxZQUFJLEtBQUssUUFBTCxDQUFjLENBQWQsRUFBaUIsSUFBakIsS0FBMEIsTUFBOUIsRUFBc0M7QUFDcEMsZUFBSyxRQUFMLENBQWMsQ0FBZCxFQUFpQixXQUFqQixDQUE2QixjQUE3QixHQUE4QyxJQUE5QztBQUNEO0FBQ0Y7QUFDRjs7OzZDQUV3QixNLEVBQVEsSSxFQUFLO0FBQ3BDLFdBQUssSUFBSSxJQUFJLENBQVIsRUFBVyxNQUFNLEtBQUssUUFBTCxDQUFjLE1BQXBDLEVBQTRDLElBQUksR0FBaEQsRUFBcUQsR0FBckQsRUFBeUQ7QUFDdkQsWUFBSSxLQUFLLFFBQUwsQ0FBYyxDQUFkLEVBQWlCLElBQWpCLEtBQTBCLE1BQTlCLEVBQXNDLEtBQUssUUFBTCxDQUFjLENBQWQsRUFBaUIsY0FBakIsR0FBa0MsSUFBbEM7QUFDdkM7QUFDRjs7OzZDQUV3QixNLEVBQVEsSSxFQUFLO0FBQ3BDLFdBQUssSUFBSSxJQUFJLENBQVIsRUFBVyxNQUFNLEtBQUssUUFBTCxDQUFjLE1BQXBDLEVBQTRDLElBQUksR0FBaEQsRUFBcUQsR0FBckQsRUFBeUQ7QUFDdkQsWUFBSSxLQUFLLFFBQUwsQ0FBYyxDQUFkLEVBQWlCLElBQWpCLEtBQTBCLE1BQTlCLEVBQXNDLEtBQUssUUFBTCxDQUFjLENBQWQsRUFBaUIsY0FBakIsR0FBa0MsSUFBbEM7QUFDdkM7QUFDRjs7Ozs7O0FBR0g7Ozs7O0lBR00sVTtBQUNKLHNCQUFZLElBQVosRUFBa0IsY0FBbEIsRUFBa0MsY0FBbEMsRUFBa0Q7QUFBQTs7QUFDaEQsU0FBSyxJQUFMLEdBQVksSUFBWjtBQUNBLFNBQUssSUFBTCxHQUFZLEtBQUssT0FBTCxDQUFhLFVBQXpCO0FBQ0EsU0FBSyxjQUFMLEdBQXNCLGNBQXRCO0FBQ0EsU0FBSyxjQUFMLEdBQXNCLGNBQXRCO0FBQ0EsU0FBSyxNQUFMO0FBQ0EsU0FBSyxNQUFMO0FBQ0Q7Ozs7OEJBRVMsUyxFQUFVO0FBQ2xCLGFBQU8sS0FBSyxJQUFMLENBQVUsT0FBVixDQUFrQixXQUF6QjtBQUNEOzs7NkJBRVEsUyxFQUFXLFcsRUFBWTtBQUM5QixXQUFLLElBQUwsR0FBWSxLQUFLLFFBQUwsQ0FBYyxLQUFLLElBQW5CLEVBQXlCLEtBQUssU0FBTCxNQUFvQixTQUE3QyxDQUFaO0FBQ0EsVUFBSSxlQUFlLEtBQUssTUFBeEIsRUFBZ0MsS0FBSyxNQUFMO0FBQ2pDOzs7Z0NBRVcsUyxFQUFXLFcsRUFBWTtBQUNqQyxXQUFLLElBQUwsR0FBWSxLQUFLLFdBQUwsQ0FBaUIsS0FBSyxJQUF0QixFQUE0QixLQUFLLFNBQUwsTUFBb0IsU0FBaEQsQ0FBWjtBQUNBLFVBQUksZUFBZSxLQUFLLE1BQXhCLEVBQWdDLEtBQUssTUFBTDtBQUNqQzs7O3NCQUVrQixHLEVBQUk7QUFDckIsVUFBSSxPQUFPLEdBQVAsS0FBZSxVQUFuQixFQUErQjtBQUMvQixXQUFLLE1BQUwsR0FBYyxHQUFkO0FBQ0QsSzt3QkFFbUI7QUFDbEIsVUFBSSxDQUFDLEtBQUssTUFBVixFQUFrQixPQUFRLFlBQVUsQ0FBRSxDQUFwQjtBQUNsQixhQUFPLEtBQUssTUFBWjtBQUNEOzs7c0JBRWtCLEcsRUFBSTtBQUNyQixVQUFJLE9BQU8sR0FBUCxLQUFlLFVBQW5CLEVBQStCO0FBQy9CLFdBQUssTUFBTCxHQUFjLEdBQWQ7QUFDRCxLO3dCQUVtQjtBQUNsQixVQUFJLENBQUMsS0FBSyxNQUFWLEVBQWtCLE9BQU8sWUFBVSxDQUFFLENBQW5CO0FBQ2xCLGFBQU8sS0FBSyxNQUFaO0FBQ0Q7Ozs7OztBQUlIOzs7OztJQUdNLGE7QUFDSix5QkFBWSxJQUFaLEVBQWtCLFdBQWxCLEVBQStCLGNBQS9CLEVBQStDLGNBQS9DLEVBQStEO0FBQUE7O0FBQzdELFNBQUssSUFBTCxHQUFZLElBQVo7QUFDQSxTQUFLLFdBQUwsR0FBbUIsV0FBbkI7QUFDQSxTQUFLLElBQUwsR0FBYSxLQUFLLE9BQUwsQ0FBYSxTQUExQjtBQUNBLFNBQUssTUFBTCxHQUFjLEtBQUssWUFBbkI7QUFDQSxTQUFLLEdBQUwsR0FBVyxLQUFLLFNBQWhCO0FBQ0EsU0FBSyxNQUFMLEdBQWMsS0FBSyxHQUFMLEdBQVMsS0FBSyxNQUE1Qjs7QUFFQTtBQUNBLFNBQUssY0FBTCxHQUFzQixjQUF0QjtBQUNBLFNBQUssY0FBTCxHQUFzQixjQUF0QjtBQUNBLFNBQUssTUFBTDtBQUNBLFNBQUssTUFBTDtBQUNBO0FBQ0EsV0FBTyxnQkFBUCxDQUF3QixTQUF4QixFQUFtQyxLQUFLLE1BQUwsQ0FBWSxJQUFaLENBQWlCLElBQWpCLENBQW5DO0FBQ0EsU0FBSyxJQUFMLENBQVUsZ0JBQVYsQ0FBMkIsT0FBM0IsRUFBb0MsWUFBVTtBQUFDLFdBQUssTUFBTDtBQUFZLEtBQXZCLENBQXdCLElBQXhCLENBQTZCLElBQTdCLENBQXBDO0FBQ0Q7Ozs7NkJBRVE7QUFDUCxXQUFLLE1BQUwsR0FBYyxLQUFLLElBQUwsQ0FBVSxZQUF4QjtBQUNBLFdBQUssR0FBTCxHQUFXLEtBQUssSUFBTCxDQUFVLFNBQXJCO0FBQ0EsV0FBSyxNQUFMLEdBQWMsS0FBSyxHQUFMLEdBQVMsS0FBSyxNQUE1QjtBQUNEOzs7NkJBRVEsUyxFQUFXLFMsRUFBVztBQUM3QixhQUFTLEtBQUssTUFBTCxHQUFjLFNBQWYsSUFBOEIsS0FBSyxHQUFMLEdBQVcsU0FBakQ7QUFDRDs7O3NCQUVrQixHLEVBQUk7QUFDckIsVUFBSSxPQUFPLEdBQVAsS0FBZSxVQUFuQixFQUErQjtBQUMvQixXQUFLLE1BQUwsR0FBYyxHQUFkO0FBQ0QsSzt3QkFFbUI7QUFDbEIsVUFBSSxDQUFDLEtBQUssTUFBVixFQUFrQixPQUFPLFlBQVUsQ0FBRSxDQUFuQjtBQUNsQixhQUFPLEtBQUssTUFBWjtBQUNEOzs7c0JBRWtCLEcsRUFBSTtBQUNyQixVQUFJLE9BQU8sR0FBUCxLQUFlLFVBQW5CLEVBQStCO0FBQy9CLFdBQUssTUFBTCxHQUFjLEdBQWQ7QUFDRCxLO3dCQUVtQjtBQUNsQixVQUFJLENBQUMsS0FBSyxNQUFWLEVBQWtCLE9BQU8sWUFBVSxDQUFFLENBQW5CO0FBQ2xCLGFBQU8sS0FBSyxNQUFaO0FBQ0Q7Ozs7OztBQUdILE9BQU8sT0FBUCxHQUFpQixTQUFqQjs7Ozs7QUM5UkEsQ0FBQyxZQUFXO0FBQ1IsUUFBSSxXQUFXLFNBQVgsUUFBVyxDQUFTLElBQVQsRUFBZSxJQUFmLEVBQXFCLEdBQXJCLEVBQTBCO0FBQ3JDLGNBQU0sT0FBTyxNQUFiO0FBQ0EsWUFBSSxVQUFVLEtBQWQ7QUFDQSxZQUFJLE9BQU8sU0FBUCxJQUFPLEdBQVc7QUFDbEIsZ0JBQUksT0FBSixFQUFhO0FBQUU7QUFBUztBQUN4QixzQkFBVSxJQUFWO0FBQ0Msa0NBQXNCLFlBQVc7QUFDOUIsb0JBQUksYUFBSixDQUFrQixJQUFJLFdBQUosQ0FBZ0IsSUFBaEIsQ0FBbEI7QUFDQSwwQkFBVSxLQUFWO0FBQ0gsYUFIQTtBQUlKLFNBUEQ7QUFRQSxZQUFJLGdCQUFKLENBQXFCLElBQXJCLEVBQTJCLElBQTNCO0FBQ0gsS0FaRDs7QUFjQTtBQUNBLGFBQVMsUUFBVCxFQUFtQixTQUFuQjtBQUNBLGFBQVMsUUFBVCxFQUFtQixTQUFuQjtBQUNILENBbEJEOzs7QUNBQTs7QUFDQSxPQUFPLE9BQVAsR0FBaUI7QUFDZixRQUFNLGNBQVMsT0FBVCxFQUFrQixJQUFsQixFQUF3QixRQUF4QixFQUFpQztBQUNyQyxZQUFRLGdCQUFSLENBQXlCLElBQXpCLEVBQStCLFFBQS9CLEVBQXlDLEtBQXpDO0FBQ0QsR0FIYzs7QUFLZixZQUFVLGtCQUFTLE9BQVQsRUFBa0IsU0FBbEIsRUFBNEI7QUFDcEMsUUFBTSxVQUFVLFFBQVEsU0FBUixDQUFrQixLQUFsQixDQUF3QixHQUF4QixDQUFoQjtBQUNBLFFBQUksUUFBUSxPQUFSLENBQWdCLFNBQWhCLElBQTZCLENBQWpDLEVBQW9DO0FBQ2xDLGNBQVEsSUFBUixDQUFhLFNBQWI7QUFDRDs7QUFFRCxZQUFRLFNBQVIsR0FBb0IsUUFBUSxJQUFSLENBQWEsR0FBYixDQUFwQjtBQUNBLFdBQU8sT0FBUDtBQUNELEdBYmM7O0FBZWYsZUFBYSxxQkFBUyxPQUFULEVBQWtCLFNBQWxCLEVBQTRCO0FBQ3ZDLFFBQU0sVUFBVSxRQUFRLFNBQVIsQ0FBa0IsS0FBbEIsQ0FBd0IsR0FBeEIsQ0FBaEI7QUFDQSxRQUFNLFFBQVEsUUFBUSxPQUFSLENBQWdCLFNBQWhCLENBQWQ7QUFDQSxRQUFJLFFBQVEsQ0FBQyxDQUFiLEVBQWU7QUFDYixjQUFRLE1BQVIsQ0FBZSxLQUFmLEVBQXNCLENBQXRCO0FBQ0Q7O0FBRUQsWUFBUSxTQUFSLEdBQW9CLFFBQVEsSUFBUixDQUFhLEdBQWIsQ0FBcEI7QUFDQSxXQUFPLE9BQVA7QUFDRDtBQXhCYyxDQUFqQiIsImZpbGUiOiJnZW5lcmF0ZWQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlc0NvbnRlbnQiOlsiKGZ1bmN0aW9uIGUodCxuLHIpe2Z1bmN0aW9uIHMobyx1KXtpZighbltvXSl7aWYoIXRbb10pe3ZhciBhPXR5cGVvZiByZXF1aXJlPT1cImZ1bmN0aW9uXCImJnJlcXVpcmU7aWYoIXUmJmEpcmV0dXJuIGEobywhMCk7aWYoaSlyZXR1cm4gaShvLCEwKTt2YXIgZj1uZXcgRXJyb3IoXCJDYW5ub3QgZmluZCBtb2R1bGUgJ1wiK28rXCInXCIpO3Rocm93IGYuY29kZT1cIk1PRFVMRV9OT1RfRk9VTkRcIixmfXZhciBsPW5bb109e2V4cG9ydHM6e319O3Rbb11bMF0uY2FsbChsLmV4cG9ydHMsZnVuY3Rpb24oZSl7dmFyIG49dFtvXVsxXVtlXTtyZXR1cm4gcyhuP246ZSl9LGwsbC5leHBvcnRzLGUsdCxuLHIpfXJldHVybiBuW29dLmV4cG9ydHN9dmFyIGk9dHlwZW9mIHJlcXVpcmU9PVwiZnVuY3Rpb25cIiYmcmVxdWlyZTtmb3IodmFyIG89MDtvPHIubGVuZ3RoO28rKylzKHJbb10pO3JldHVybiBzfSkiLCJjb25zdCBTaW1wbGVTcHkgPSByZXF1aXJlKCcuL21vZHVsZXMvc2ltcGxlU3B5LmpzJyk7XHJcbmdsb2JhbC5TaW1wbGVTcHkgPSBtb2R1bGUuZXhwb3J0cyA9IFNpbXBsZVNweTtcclxuIiwiY29uc3QgVGhyb3R0bGVyID0gcmVxdWlyZSgnLi90aHJvdHRsZScpO1xyXG5jb25zdCBVdGlsID0gcmVxdWlyZSgnLi91dGlsJyk7XHJcblxyXG5mdW5jdGlvbiBnZXRCeVByb3AocHJvcCkge1xyXG4gIGxldCBtYXRjaGluZyA9IFtdO1xyXG4gIGxldCBlbGVtcyA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKCcqJyk7XHJcbiAgZm9yIChsZXQgaSA9IDAsIGxlbiA9IGVsZW1zLmxlbmd0aDsgaSA8IGxlbjsgaSsrKXtcclxuICAgIGlmIChlbGVtc1tpXS5nZXRBdHRyaWJ1dGUocHJvcCkgIT09IG51bGwpIHtcclxuICAgICAgbWF0Y2hpbmcucHVzaChlbGVtc1tpXSk7XHJcbiAgICB9XHJcbiAgfVxyXG4gIHJldHVybiBtYXRjaGluZztcclxufVxyXG5cclxuZnVuY3Rpb24gY2hlY2tVbnRpbChhcnJheSwgY2hlY2tGdW5jdGlvbil7XHJcblx0Zm9yIChsZXQgaSA9IDAsIGxlbiA9IGFycmF5Lmxlbmd0aDsgaSA8IGxlbjsgaSsrKXtcclxuICBcdGNvbnN0IGJvb2wgPSBjaGVja0Z1bmN0aW9uKGFycmF5W2ldKTtcclxuICAgIGlmIChib29sKXtcclxuICAgIFx0cmV0dXJuIHtpbmRleDogaSwgdmFsOiBhcnJheVtpXX07XHJcbiAgICB9XHJcbiAgfVxyXG59O1xyXG5cclxuY2xhc3MgU2ltcGxlU3B5IHtcclxuICBjb25zdHJ1Y3Rvcihpbml0T2JqKSB7XHJcbiAgICB0aGlzLmVsZW1lbnRzID0gW107XHJcbiAgICB0aGlzLmxpbmtzID0gW107XHJcbiAgICAvKiBPcHRpb25zICovXHJcbiAgICB0aGlzLm9ubHlUb3AgPSAoaW5pdE9iaiAmJiBcIm9ubHlUb3BcIiBpbiBpbml0T2JqKSA/IGluaXRPYmoub25seVRvcCA6IHRydWU7XHJcbiAgICB0aGlzLmFjdGl2ZUNsYXNzTmFtZSA9IChpbml0T2JqICYmIGluaXRPYmouYWN0aXZlQ2xhc3NOYW1lKSA/IGluaXRPYmouYWN0aXZlQ2xhc3NOYW1lIDogJ2FjdGl2ZSc7XHJcbiAgICB0aGlzLnRyaWdnZXJGdW5jdGlvbnMgPSAgKGluaXRPYmogJiYgXCJ0cmlnZ2VyRnVuY3Rpb25zXCIgaW4gaW5pdE9iaikgPyBpbml0T2JqLnRyaWdnZXJGdW5jdGlvbnMgOiB0cnVlO1xyXG4gICAgdGhpcy5saW5rQXJyaXZlRnVuY3Rpb24gPSBpbml0T2JqLmxpbmtBcnJpdmVGdW5jdGlvbjtcclxuICAgIHRoaXMuZWxlbWVudEFycml2ZUZ1bmN0aW9uID0gaW5pdE9iai5lbGVtZW50QXJyaXZlRnVuY3Rpb247XHJcbiAgICB0aGlzLmxpbmtEZXBhcnRGdW5jdGlvbiA9IGluaXRPYmoubGlua0RlcGFydEZ1bmN0aW9uO1xyXG4gICAgdGhpcy5lbGVtZW50RGVwYXJ0RnVuY3Rpb24gPSBpbml0T2JqLmVsZW1lbnREZXBhcnRGdW5jdGlvbjtcclxuICAgIC8qIFVJICovXHJcbiAgICB0aGlzLmxhc3RUb3A7XHJcbiAgICB0aGlzLmluYm91bmRzQXJyYXkgPSBbXTtcclxuXHJcbiAgICAvKiBXaW5kb3cgTGlzdGVuZXJzICovXHJcbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcInRTY3JvbGxcIiwgdGhpcy5vblNjcm9sbC5iaW5kKHRoaXMpKTtcclxuICAgIC8qIERvY3VtZW50IExpc3RlbmVycyAqL1xyXG4gICAgIHRoaXMuX2luaXQoKTtcclxuICB9XHJcblxyXG4gIF9pbml0KCkge1xyXG4gICAgLy9DbGVhciBPYmplY3QgQXJyYXlzXHJcbiAgICB0aGlzLmVsZW1lbnRzID0gW107XHJcbiAgICB0aGlzLmxpbmtzID0gW107XHJcbiAgICAvL0dldCBTcGllZCBFbGVtZW50c1xyXG4gICAgY29uc3Qgc3B5RWxlbXMgPSBnZXRCeVByb3AoJ2RhdGEtc2Nyb2xsLXNweScpO1xyXG4gICAgLy9HZXQgTGluayBFbGVtZW50c1xyXG4gICAgY29uc3Qgc3B5TGlua3MgPSBnZXRCeVByb3AoJ2RhdGEtc2Nyb2xsLWxpbmsnKTtcclxuICAgIC8vR2VuZXJhdGUgbGluayBvYmplY3RzXHJcbiAgICBmb3IgKGxldCBpID0gMCwgbGVuID0gc3B5TGlua3MubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcclxuICAgICAgdGhpcy5saW5rcy5wdXNoKG5ldyBTY3JvbGxMaW5rKHNweUxpbmtzW2ldLCB0aGlzLmxpbmtBcnJpdmVGdW5jdGlvbiwgdGhpcy5saW5rRGVwYXJ0RnVuY3Rpb24pKTtcclxuICAgIH1cclxuICAgIC8vR2VuZXJhdGUgc3B5IFNjcm9sbEVsZW1lbnQgT2JqZWN0cyBpZiBDb3JyZXNwb25kaW5nIGxpbmsgZXhpc3RzXHJcbiAgICBmb3IgKGxldCBpID0gMCwgbGVuID0gc3B5RWxlbXMubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcclxuICAgICAgZm9yIChsZXQgaiA9IDAsIGpMZW4gPSB0aGlzLmxpbmtzLmxlbmd0aDsgaiA8IGpMZW47IGorKykge1xyXG4gICAgICAgIGlmIChzcHlFbGVtc1tpXS5kYXRhc2V0LnNjcm9sbFNweSA9PT0gdGhpcy5saW5rc1tqXS5uYW1lKSB7XHJcbiAgICAgICAgICB0aGlzLmVsZW1lbnRzLnB1c2gobmV3IFNjcm9sbEVsZW1lbnQoc3B5RWxlbXNbaV0sIHRoaXMubGlua3Nbal0sIHRoaXMuZWxlbWVudEFycml2ZUZ1bmN0aW9uLCB0aGlzLmVsZW1lbnREZXBhcnRGdW5jdGlvbikpO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgLy9Tb3J0IHNvIHRoYXQgZWxlbWVudHMgbW92ZSBmcm9tIHRoZSB0b3Agb2YgdGhlIHdpbmRvdyB0byB0aGUgYm90dG9tIChqdXN0IGluIGNhc2UpXHJcbiAgICB0aGlzLmVsZW1lbnRzID0gdGhpcy5lbGVtZW50cy5zb3J0KChhLCBiKSA9PiB7XHJcbiAgICAgIHJldHVybiBhLnRvcCAtIGIudG9wO1xyXG4gICAgfSk7XHJcbiAgICAvL1Njcm9sbCBvbmNlIGp1c3QgdG8gdXBkYXRlIHRoZSBjbGFzc2VzXHJcbiAgICB0aGlzLm9uU2Nyb2xsKCk7XHJcbiAgfVxyXG5cclxuICBvblNjcm9sbCgpIHtcclxuICAgIC8vZ2V0IHRoZSB0b3Agb2YgdGhlIHdpbmRvd1xyXG4gICAgY29uc3QgdG9wID0gdGhpcy5nZXRUb3AoKTtcclxuICAgIC8vSWYgb25seSBzaG93aW5nIHRoZSBsb3dlc3QgZWxlbWVudCBhYm92ZSB0aGUgdG9wIG9mIHRoZSB3aW5kb3dcclxuICAgIGlmKHRoaXMub25seVRvcCl7XHJcbiAgICAgIC8vQ2hlY2sgZm9yIHRoZSBsYXN0IGVsZW1lbnQgaW4gdGhlIGFycmF5IHRoYXQgaXMgc3RpbGwgaGlnaGVyIHRoYW4gdGhlIHRvcFxyXG4gICAgICBsZXQgdG9wRWxlbWVudCA9IGNoZWNrVW50aWwodGhpcy5lbGVtZW50cywgKGkpPT57XHJcbiAgICAgICAgcmV0dXJuIChpLmJvdHRvbSA+IHRvcCk7XHJcbiAgICAgIH0pXHJcbiAgICAgIGlmICh0b3BFbGVtZW50KXtcclxuICAgICAgICBpZiAodGhpcy5sYXN0VG9wICE9PSB0b3BFbGVtZW50LmluZGV4KXtcclxuICAgICAgICAgIC8vQXMgbG9uZyBhcyB0aGlzLmxhc3RUb3AgaXMgbm90IHVuZGVmaW5lZCwgcmVtb3ZlIGl0cyBjbGFzc1xyXG4gICAgICAgICAgaWYgKHR5cGVvZiB0aGlzLmxhc3RUb3AgIT09ICd1bmRlZmluZWQnKSB0aGlzLnJlbW92ZUNsYXNzKHRoaXMuZWxlbWVudHNbdGhpcy5sYXN0VG9wXSwgdGhpcy5hY3RpdmVDbGFzc05hbWUpO1xyXG4gICAgICAgICAgLy9zZXQgbmV3IHRvcCBlbGVtZW50XHJcbiAgICAgICAgICB0aGlzLmFkZENsYXNzKHRoaXMuZWxlbWVudHNbdG9wRWxlbWVudC5pbmRleF0sIHRoaXMuYWN0aXZlQ2xhc3NOYW1lKTtcclxuICAgICAgICAgIHRoaXMubGFzdFRvcCA9IHRvcEVsZW1lbnQuaW5kZXg7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICAvL0lmIGNoZWNraW5nIGFsbCBpbmJvdW5kcyBlbGVtZW50c1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgLy9HZXQgdGhlIGJvdHRvbSBvZiB0aGUgd2luZG93XHJcbiAgICAgIGNvbnN0IGJvdCA9IHRoaXMuZ2V0Qm90dG9tKCk7XHJcbiAgICAgIC8vQ2hlY2sgYWxsIFNjcm9sbCBFbGVtZW50c1xyXG4gICAgICBmb3IgKGxldCBpID0gMCwgbGVuID0gdGhpcy5lbGVtZW50cy5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xyXG4gICAgICAgIC8vQ2hlY2sgaWYgRWFjaCBlbGVtZW50IGlzIGluYm91bmRzXHJcbiAgICAgICAgaWYgKHRoaXMuZWxlbWVudHNbaV0uaW5ib3VuZHModG9wLCBib3QpKSB7XHJcbiAgICAgICAgICB0aGlzLmFkZFRvSW5ib3VuZHNBcnJheSh0aGlzLmVsZW1lbnRzW2ldLm5hbWUsIGkpO1xyXG4gICAgICAgIC8vSWYgbm90IGluYm91bmRzIHJlbW92ZSBmcm9tIGFycmF5XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgIC8vbWFrZSBzdXJlIGl0IGlzIGluIGFycmF5XHJcbiAgICAgICAgICB0aGlzLnJlbW92ZUZyb21JbmJvdW5kc0FycmF5KHRoaXMuZWxlbWVudHNbaV0ubmFtZSwgaSk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBnZXRUb3AoKSB7XHJcbiAgICAgdmFyIGJvZHkgPSBkb2N1bWVudC5ib2R5O1xyXG4gICAgIHZhciBkb2NFbCA9IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudDtcclxuICAgICB2YXIgc2Nyb2xsVG9wID0gd2luZG93LnBhZ2VZT2Zmc2V0IHx8IGRvY0VsLnNjcm9sbFRvcCB8fCBib2R5LnNjcm9sbFRvcDtcclxuICAgICB2YXIgY2xpZW50VG9wID0gZG9jRWwuY2xpZW50VG9wIHx8IGJvZHkuY2xpZW50VG9wIHx8IDA7XHJcbiAgICAgdmFyIHRvcCAgPSBzY3JvbGxUb3AgLSBjbGllbnRUb3A7XHJcbiAgICAgcmV0dXJuIE1hdGgucm91bmQodG9wKTtcclxuICB9XHJcblxyXG4gIGdldEJvdHRvbSgpIHtcclxuICAgIGNvbnN0IHRvcCA9IHRoaXMuZ2V0VG9wKCk7XHJcbiAgICBjb25zdCBoZWlnaHQgPSB3aW5kb3cuaW5uZXJIZWlnaHQ7XHJcbiAgICByZXR1cm4gdG9wK2hlaWdodDtcclxuICB9XHJcblxyXG4gIGFkZFRvSW5ib3VuZHNBcnJheShuYW1lLCBlbGVtZW50c0luZGV4KSB7XHJcbiAgICBjb25zdCBpbmRleCA9IHRoaXMuaW5ib3VuZHNBcnJheS5pbmRleE9mKG5hbWUpO1xyXG4gICAgaWYgKGluZGV4IDwgMCl7XHJcbiAgICAgIHRoaXMuaW5ib3VuZHNBcnJheS5wdXNoKG5hbWUpO1xyXG4gICAgICB0aGlzLmFkZENsYXNzKHRoaXMuZWxlbWVudHNbZWxlbWVudHNJbmRleF0sIHRoaXMuYWN0aXZlQ2xhc3NOYW1lKVxyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgcmVtb3ZlRnJvbUluYm91bmRzQXJyYXkobmFtZSwgZWxlbWVudHNJbmRleCkge1xyXG4gICAgY29uc3QgaW5kZXggPSB0aGlzLmluYm91bmRzQXJyYXkuaW5kZXhPZihuYW1lKTtcclxuICAgIGlmIChpbmRleCA+IC0xKXtcclxuICAgICAgdGhpcy5pbmJvdW5kc0FycmF5LnNwbGljZShpbmRleCwgMSk7XHJcbiAgICAgIHRoaXMucmVtb3ZlQ2xhc3ModGhpcy5lbGVtZW50c1tlbGVtZW50c0luZGV4XSwgdGhpcy5hY3RpdmVDbGFzc05hbWUpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgYWRkQ2xhc3MoZWxlbWVudCwgY2xhc3NOYW1lKXtcclxuICAgIGlmIChlbGVtZW50ICYmIHRoaXMudHJpZ2dlckZ1bmN0aW9ucykgZWxlbWVudC5hcnJpdmVGdW5jdGlvbigpO1xyXG4gICAgaWYgKGVsZW1lbnQgJiYgXCJsaW5rRWxlbWVudFwiIGluIGVsZW1lbnQpIGVsZW1lbnQubGlua0VsZW1lbnQuYWRkQ2xhc3MoY2xhc3NOYW1lLCB0aGlzLnRyaWdnZXJGdW5jdGlvbnMpO1xyXG4gIH1cclxuXHJcbiAgcmVtb3ZlQ2xhc3MoZWxlbWVudCwgY2xhc3NOYW1lKXtcclxuICAgIGlmIChlbGVtZW50ICYmIHRoaXMudHJpZ2dlckZ1bmN0aW9ucykgZWxlbWVudC5kZXBhcnRGdW5jdGlvbigpO1xyXG4gICAgaWYgKGVsZW1lbnQgJiYgXCJsaW5rRWxlbWVudFwiIGluIGVsZW1lbnQpIGVsZW1lbnQubGlua0VsZW1lbnQucmVtb3ZlQ2xhc3MoY2xhc3NOYW1lLCB0aGlzLnRyaWdnZXJGdW5jdGlvbnMpO1xuICB9XHJcblxyXG4gIHNldE9ubHlUb3Aoc2V0dGVyKXtcclxuICAgIGlmIChzZXR0ZXIgPT09ICd0b2dnbGUnKSByZXR1cm4gdGhpcy5vbmx5VG9wID0gIXRoaXMub25seVRvcDtcclxuICAgIHJldHVybiB0aGlzLm9ubHlUb3AgPSBzZXR0ZXI7XHJcbiAgfVxyXG5cclxuICBzZXRMaW5rQXJyaXZlRnVuY3Rpb24oZWxOYW1lLCBmdW5jKXtcclxuICAgIGZvciAobGV0IGkgPSAwLCBsZW4gPSB0aGlzLmVsZW1lbnRzLmxlbmd0aDsgaSA8IGxlbjsgaSsrKXtcclxuICAgICAgaWYgKHRoaXMuZWxlbWVudHNbaV0ubmFtZSA9PT0gZWxOYW1lKSB7XHJcbiAgICAgICAgdGhpcy5lbGVtZW50c1tpXS5saW5rRWxlbWVudC5hcnJpdmVGdW5jdGlvbiA9IGZ1bmM7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9XHJcblxyXG4gIHNldExpbmtEZXBhcnRGdW5jdGlvbihlbE5hbWUsIGZ1bmMpe1xyXG4gICAgZm9yIChsZXQgaSA9IDAsIGxlbiA9IHRoaXMuZWxlbWVudHMubGVuZ3RoOyBpIDwgbGVuOyBpKyspe1xyXG4gICAgICBpZiAodGhpcy5lbGVtZW50c1tpXS5uYW1lID09PSBlbE5hbWUpIHtcclxuICAgICAgICB0aGlzLmVsZW1lbnRzW2ldLmxpbmtFbGVtZW50LmRlcGFydEZ1bmN0aW9uID0gZnVuYztcclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgc2V0RWxlbWVudEFycml2ZUZ1bmN0aW9uKGVsTmFtZSwgZnVuYyl7XHJcbiAgICBmb3IgKGxldCBpID0gMCwgbGVuID0gdGhpcy5lbGVtZW50cy5sZW5ndGg7IGkgPCBsZW47IGkrKyl7XHJcbiAgICAgIGlmICh0aGlzLmVsZW1lbnRzW2ldLm5hbWUgPT09IGVsTmFtZSkgdGhpcy5lbGVtZW50c1tpXS5kZXBhcnRGdW5jdGlvbiA9IGZ1bmM7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBzZXRFbGVtZW50RGVwYXJ0RnVuY3Rpb24oZWxOYW1lLCBmdW5jKXtcclxuICAgIGZvciAobGV0IGkgPSAwLCBsZW4gPSB0aGlzLmVsZW1lbnRzLmxlbmd0aDsgaSA8IGxlbjsgaSsrKXtcclxuICAgICAgaWYgKHRoaXMuZWxlbWVudHNbaV0ubmFtZSA9PT0gZWxOYW1lKSB0aGlzLmVsZW1lbnRzW2ldLmRlcGFydEZ1bmN0aW9uID0gZnVuYztcclxuICAgIH1cclxuICB9XHJcbn1cclxuXHJcbi8qXHJcbiAgTGluayBFbGVtZW50IHRvIGJlIG1vZGlmaWVkXHJcbiovXHJcbmNsYXNzIFNjcm9sbExpbmsge1xyXG4gIGNvbnN0cnVjdG9yKHNlbGYsIGFycml2ZUZ1bmN0aW9uLCBkZXBhcnRGdW5jdGlvbikge1xyXG4gICAgdGhpcy5zZWxmID0gc2VsZjtcclxuICAgIHRoaXMubmFtZSA9IHNlbGYuZGF0YXNldC5zY3JvbGxMaW5rO1xyXG4gICAgdGhpcy5hcnJpdmVGdW5jdGlvbiA9IGFycml2ZUZ1bmN0aW9uO1xyXG4gICAgdGhpcy5kZXBhcnRGdW5jdGlvbiA9IGRlcGFydEZ1bmN0aW9uO1xyXG4gICAgdGhpcy5fYUZ1bmM7XHJcbiAgICB0aGlzLl9kRnVuYztcclxuICB9XHJcblxyXG4gIGdldEN1c3RvbShjbGFzc05hbWUpe1xyXG4gICAgcmV0dXJuIHRoaXMuc2VsZi5kYXRhc2V0LnNjcm9sbENsYXNzO1xyXG4gIH1cclxuXHJcbiAgYWRkQ2xhc3MoY2xhc3NOYW1lLCBydW5GdW5jdGlvbil7XHJcbiAgICB0aGlzLnNlbGYgPSBVdGlsLmFkZENsYXNzKHRoaXMuc2VsZiwgdGhpcy5nZXRDdXN0b20oKSB8fCBjbGFzc05hbWUpXHJcbiAgICBpZiAocnVuRnVuY3Rpb24gJiYgdGhpcy5fYUZ1bmMpIHRoaXMuX2FGdW5jKCk7XHJcbiAgfVxyXG5cclxuICByZW1vdmVDbGFzcyhjbGFzc05hbWUsIHJ1bkZ1bmN0aW9uKXtcclxuICAgIHRoaXMuc2VsZiA9IFV0aWwucmVtb3ZlQ2xhc3ModGhpcy5zZWxmLCB0aGlzLmdldEN1c3RvbSgpIHx8IGNsYXNzTmFtZSk7XHJcbiAgICBpZiAocnVuRnVuY3Rpb24gJiYgdGhpcy5fZEZ1bmMpIHRoaXMuX2RGdW5jKCk7XHJcbiAgfVxyXG5cclxuICBzZXQgYXJyaXZlRnVuY3Rpb24odmFsKXtcclxuICAgIGlmICh0eXBlb2YgdmFsICE9PSAnZnVuY3Rpb24nKSByZXR1cm47XHJcbiAgICB0aGlzLl9hRnVuYyA9IHZhbDtcclxuICB9XHJcblxyXG4gIGdldCBhcnJpdmVGdW5jdGlvbigpe1xyXG4gICAgaWYgKCF0aGlzLl9hRnVuYykgcmV0dXJuICBmdW5jdGlvbigpe307XHJcbiAgICByZXR1cm4gdGhpcy5fYUZ1bmM7XHJcbiAgfVxyXG5cclxuICBzZXQgZGVwYXJ0RnVuY3Rpb24odmFsKXtcclxuICAgIGlmICh0eXBlb2YgdmFsICE9PSAnZnVuY3Rpb24nKSByZXR1cm47XHJcbiAgICB0aGlzLl9kRnVuYyA9IHZhbDtcclxuICB9XHJcblxyXG4gIGdldCBkZXBhcnRGdW5jdGlvbigpe1xyXG4gICAgaWYgKCF0aGlzLl9kRnVuYykgcmV0dXJuIGZ1bmN0aW9uKCl7fTtcclxuICAgIHJldHVybiB0aGlzLl9kRnVuYztcclxuICB9XHJcblxyXG59XHJcblxyXG4vKlxyXG4gIFNjcm9sbCBFbGVtZW50IHRvIGJlIHdhdGNoZWRcclxuKi9cclxuY2xhc3MgU2Nyb2xsRWxlbWVudCB7XHJcbiAgY29uc3RydWN0b3Ioc2VsZiwgbGlua0VsZW1lbnQsIGFycml2ZUZ1bmN0aW9uLCBkZXBhcnRGdW5jdGlvbikge1xyXG4gICAgdGhpcy5zZWxmID0gc2VsZjtcclxuICAgIHRoaXMubGlua0VsZW1lbnQgPSBsaW5rRWxlbWVudDtcclxuICAgIHRoaXMubmFtZSA9ICBzZWxmLmRhdGFzZXQuc2Nyb2xsU3B5O1xyXG4gICAgdGhpcy5oZWlnaHQgPSBzZWxmLm9mZnNldEhlaWdodDtcclxuICAgIHRoaXMudG9wID0gc2VsZi5vZmZzZXRUb3A7XHJcbiAgICB0aGlzLmJvdHRvbSA9IHRoaXMudG9wK3RoaXMuaGVpZ2h0O1xyXG5cclxuICAgIC8qIEZ1bmN0aW9ucyAqL1xyXG4gICAgdGhpcy5hcnJpdmVGdW5jdGlvbiA9IGFycml2ZUZ1bmN0aW9uO1xyXG4gICAgdGhpcy5kZXBhcnRGdW5jdGlvbiA9IGRlcGFydEZ1bmN0aW9uO1xyXG4gICAgdGhpcy5fYUZ1bmM7XHJcbiAgICB0aGlzLl9kRnVuYztcclxuICAgIC8qIFdpbmRvdyBMaXN0ZW5lcnMgKi9cclxuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwidFJlc2l6ZVwiLCB0aGlzLnJlc2l6ZS5iaW5kKHRoaXMpKTtcclxuICAgIHRoaXMuc2VsZi5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgZnVuY3Rpb24oKXt0aGlzLl9hRnVuY30uYmluZCh0aGlzKSlcclxuICB9XHJcblxyXG4gIHJlc2l6ZSgpIHtcclxuICAgIHRoaXMuaGVpZ2h0ID0gdGhpcy5zZWxmLm9mZnNldEhlaWdodDtcclxuICAgIHRoaXMudG9wID0gdGhpcy5zZWxmLm9mZnNldFRvcDtcclxuICAgIHRoaXMuYm90dG9tID0gdGhpcy50b3ArdGhpcy5oZWlnaHQ7XHJcbiAgfVxyXG5cclxuICBpbmJvdW5kcyhzY3JlZW5NaW4sIHNjcmVlbk1heCkge1xyXG4gICAgcmV0dXJuICgodGhpcy5ib3R0b20gPiBzY3JlZW5NaW4pICYmICh0aGlzLnRvcCA8IHNjcmVlbk1heCkpO1xyXG4gIH1cclxuXHJcbiAgc2V0IGFycml2ZUZ1bmN0aW9uKHZhbCl7XHJcbiAgICBpZiAodHlwZW9mIHZhbCAhPT0gJ2Z1bmN0aW9uJykgcmV0dXJuO1xyXG4gICAgdGhpcy5fYUZ1bmMgPSB2YWw7XHJcbiAgfVxyXG5cclxuICBnZXQgYXJyaXZlRnVuY3Rpb24oKXtcclxuICAgIGlmICghdGhpcy5fYUZ1bmMpIHJldHVybiBmdW5jdGlvbigpe307XHJcbiAgICByZXR1cm4gdGhpcy5fYUZ1bmM7XHJcbiAgfVxyXG5cclxuICBzZXQgZGVwYXJ0RnVuY3Rpb24odmFsKXtcclxuICAgIGlmICh0eXBlb2YgdmFsICE9PSAnZnVuY3Rpb24nKSByZXR1cm47XHJcbiAgICB0aGlzLl9kRnVuYyA9IHZhbDtcclxuICB9XHJcblxyXG4gIGdldCBkZXBhcnRGdW5jdGlvbigpe1xyXG4gICAgaWYgKCF0aGlzLl9kRnVuYykgcmV0dXJuIGZ1bmN0aW9uKCl7fTtcclxuICAgIHJldHVybiB0aGlzLl9kRnVuYztcclxuICB9XHJcbn1cclxuXHJcbm1vZHVsZS5leHBvcnRzID0gU2ltcGxlU3B5O1xyXG4iLCIoZnVuY3Rpb24oKSB7XHJcbiAgICB2YXIgdGhyb3R0bGUgPSBmdW5jdGlvbih0eXBlLCBuYW1lLCBvYmopIHtcclxuICAgICAgICBvYmogPSBvYmogfHwgd2luZG93O1xyXG4gICAgICAgIHZhciBydW5uaW5nID0gZmFsc2U7XHJcbiAgICAgICAgdmFyIGZ1bmMgPSBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgaWYgKHJ1bm5pbmcpIHsgcmV0dXJuOyB9XHJcbiAgICAgICAgICAgIHJ1bm5pbmcgPSB0cnVlO1xyXG4gICAgICAgICAgICAgcmVxdWVzdEFuaW1hdGlvbkZyYW1lKGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgICAgb2JqLmRpc3BhdGNoRXZlbnQobmV3IEN1c3RvbUV2ZW50KG5hbWUpKTtcclxuICAgICAgICAgICAgICAgIHJ1bm5pbmcgPSBmYWxzZTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfTtcclxuICAgICAgICBvYmouYWRkRXZlbnRMaXN0ZW5lcih0eXBlLCBmdW5jKTtcclxuICAgIH07XHJcblxyXG4gICAgLyogaW5pdCAtIHlvdSBjYW4gaW5pdCBhbnkgZXZlbnQgKi9cclxuICAgIHRocm90dGxlKFwicmVzaXplXCIsIFwidFJlc2l6ZVwiKTtcclxuICAgIHRocm90dGxlKFwic2Nyb2xsXCIsIFwidFNjcm9sbFwiKTtcclxufSkoKTtcclxuIiwiXCJ1c2Ugc3RyaWN0XCI7XHJcbm1vZHVsZS5leHBvcnRzID0ge1xyXG4gIGJpbmQ6IGZ1bmN0aW9uKGVsZW1lbnQsIG5hbWUsIGxpc3RlbmVyKXtcclxuICAgIGVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihuYW1lLCBsaXN0ZW5lciwgZmFsc2UpO1xyXG4gIH0sXHJcblxyXG4gIGFkZENsYXNzOiBmdW5jdGlvbihlbGVtZW50LCBjbGFzc05hbWUpe1xyXG4gICAgY29uc3QgY2xhc3NlcyA9IGVsZW1lbnQuY2xhc3NOYW1lLnNwbGl0KCcgJyk7XHJcbiAgICBpZiAoY2xhc3Nlcy5pbmRleE9mKGNsYXNzTmFtZSkgPCAwKSB7XHJcbiAgICAgIGNsYXNzZXMucHVzaChjbGFzc05hbWUpO1xyXG4gICAgfVxyXG5cclxuICAgIGVsZW1lbnQuY2xhc3NOYW1lID0gY2xhc3Nlcy5qb2luKCcgJyk7XHJcbiAgICByZXR1cm4gZWxlbWVudDtcclxuICB9LFxyXG5cclxuICByZW1vdmVDbGFzczogZnVuY3Rpb24oZWxlbWVudCwgY2xhc3NOYW1lKXtcclxuICAgIGNvbnN0IGNsYXNzZXMgPSBlbGVtZW50LmNsYXNzTmFtZS5zcGxpdCgnICcpO1xyXG4gICAgY29uc3QgaW5kZXggPSBjbGFzc2VzLmluZGV4T2YoY2xhc3NOYW1lKTtcclxuICAgIGlmIChpbmRleCA+IC0xKXtcclxuICAgICAgY2xhc3Nlcy5zcGxpY2UoaW5kZXgsIDEpO1xyXG4gICAgfVxyXG5cclxuICAgIGVsZW1lbnQuY2xhc3NOYW1lID0gY2xhc3Nlcy5qb2luKCcgJyk7XHJcbiAgICByZXR1cm4gZWxlbWVudDtcclxuICB9XHJcbn1cclxuIl19\n"],"file":"simpleSpy.js"}